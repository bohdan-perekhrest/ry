#!/usr/bin/env bash

# Library version
VERSION="0.6"

[[ -z "$XDG_DATA_HOME" ]] && XDG_DATA_HOME="$HOME/.local/share"
[[ -z "$RY_DATA" ]]   && RY_DATA="${XDG_DATA_HOME}/ry"
[[ -z "$RY_RUBIES" ]] && RY_RUBIES="${RY_DATA}/rubies"

# Helper functions
abort() {
  printf "\033[31mError: $@\033[0m\n" >&2 && exit 1
}

log() {
  printf "\033[90mry:\033[0m $@\n"
}

exists?() {
  type "$@" &>/dev/null
}

# Setup directory structure
[[ -d $RY_RUBIES ]] || mkdir -p $RY_RUBIES

if [[ ! -d $RY_RUBIES ]]; then
  abort "Failed to create rubies directory ($RY_RUBIES), do you have permissions to do this?"
fi

# Core functions
assert_installed() {
  local name="$1"; shift
  if [[ -z "$name" ]]; then
    [[ -n "$@" ]] && "$@"
    abort "ruby version missing"
  elif [[ ! -d "$RY_RUBIES/$name" ]]; then
    [[ -n "$@" ]] && "$@"
    abort "no such ruby: $name"
  fi
}

ry::current() {
  [[ -h "$RY_DATA/current" ]] && basename "$(readlink "$RY_DATA/current")" || echo "system"
}

ry::list() {
  local active="$(ry current)"
  for dir in $RY_RUBIES/*; do
    if [[ -d "$dir" ]]; then
      local version="${dir##*/}"
      if [[ "$version" == "$active" ]]; then
        printf "\033[32mâ†’ %-7s\033[0m\n" "$version"
      else
        printf "  %-7s\n" "$version"
      fi
    fi
  done
}

ry::setup() {
  local ruby_bin_path="$RY_DATA/current/bin"

  cat <<RYSETUP
# Generated by ry setup
export PATH="${ruby_bin_path}:\${PATH}"
RYSETUP
}

ry::install() {
  local ruby_version="$1"; shift
  local name="${1:-$ruby_version}"; shift

  if [[ -z "$ruby_version" ]]; then
    abort "no Ruby version given. Usage: ry install <ruby-version> [<name>]"
  fi

  local dir="$RY_RUBIES/$name"

  if exists? ruby-build; then
    ruby-build "$ruby_version" "$dir" || abort "Installation failed"
    log "Successfully installed Ruby $ruby_version as $name"
    ry use "$name"
  else
    abort "ruby-build is required for installation. Please install it first."
  fi
}

ry::use() {
  local name="$1"
  assert_installed "$name"

  rm -f "$RY_DATA/current"
  ln -s "$RY_RUBIES/$name" "$RY_DATA/current"
  ry current
}

ry::uninstall() {
  [[ $# == 0 ]] && abort "name(s) required"

  while [[ $# != 0 ]]; do
    local name="$1"
    assert_installed "$name"

    if [[ "$(ry current)" == "$name" ]]; then
      ry::system
    fi

    rm -rf "$RY_RUBIES/$name"
    log "Successfully uninstalled Ruby version $name"
    shift
  done
}

ry::system() {
  rm -f "$RY_DATA/current"
  log "Switched to system Ruby"
}

ry::help() {
  cat <<-usage
  Usage: ry [COMMAND] [args]

  Commands:
    ry [list]                    List installed Ruby versions
    ry current                   Show current Ruby version
    ry use <name>                Use the Ruby version given by <name>
    ry install <version> [<name>] Install Ruby <version> using ruby-build
    ry uninstall <name>          Remove the given Ruby version
    ry system                    Switch to system Ruby
    ry setup                     Output shell commands to add Ruby to PATH

  Options:
    -v, --version                Display version
    -h, --help                   Display help information
usage
}

ry::version() {
  echo $VERSION
}


ry() {
  case "$1" in
    "") ry::list ;;
    -h|--help|--usage|-?) ry::help ;;
    -v|--version) ry::version ;;
    *)
      local command="$1"; shift
      if declare -f "ry::$command" > /dev/null; then
        "ry::$command" "$@"
      else
        abort "unknown command: $command"
      fi
      ;;
  esac
}

ry "$@"
